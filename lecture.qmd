---
title: "Review"
author: "Intro to Data Science"
date: "Week 04"
format: html
---

# Goals

- In the last three weeks, we have discussed a lot of new ideas/concepts.
- This week, I want to slow down and spend some time discussing what we've learned and why.
- Data visualization: ggplot
    - `ggplot(foo, aes(x = bar, y = baz)) +`
    - `geom_point()`
- Data transformation: dplyr
    - `filter()`
    - `group_by()`
    - `summarize()` | `count()`
    - `arrange`
- New ideas for tonight:
    - Create new columns: `mutate()`
    - Linear Regression
    - Honestly, mostly review.

Tonight's lecture is FULL of opportunities for you to practice. I STRONGLY recommend you pause the video and genuinely try to complete these mini-challenges. This lecture is available on Posit Cloud.



# Setup

Run the code-chunk below to load everything you need for tonight's lecture.

```{r setup}
#| message=FALSE
#| warning=FALSE

library(knitr)
library(rio)
library(tidyverse)

## Disables scientific notation.
## This is useful below.
options(scipen = 999)

## This is a subset of the data from the gapminder presentation above.
## https://www.gapminder.org/
gapminder <- import("data/gapminder.csv")
```

# Gapminder Data

```{r}
gapminder
```

# Distinct!!!

It is often useful to know the distinct values of a column.

```{r}
gapminder |>
  select(continent) |>
  distinct()
```

**Notes:** 

- Antarctica isn't shown. 
- North and South America are squished together. 
- ðŸ¤· 

So, what do these new functions do?

- `select()` chooses which columns to keep.
    - This can also be used to drop columns and rearrange columns.
- `distinct()` returns the unique values in the _rows_ of the table.
    - UNIQUE ROWS!
    - This is SIMILAR to . . . .

```{r}
gapminder |>
  group_by(continent) |>
  count()
```

- These two code chunks are similar in terms of complexity.
- However, the results are slightly different.

## YOUR TURN

What is the distinct list of countries from Oceania?

```{r}
## YOUR CODE HERE!

```

Ha! The list of commands is longer than the list of countries.


## YOUR TURN

What is the first/last year per continent in this data set?

```{r}
## YOUR CODE HERE!

```

# Summarize

How many people lived in each continent in 2007?

- Create a new tibble called `cnt07` to hold this new data.
- Create a column called `tot_pop` to hold you summary statistic.
- Note: You can use these verbs to create NEW data sets.
    - This is important!
    - This is going to be on the midterm/final!!! (HINT!)

```{r}
cnt07 <-
  gapminder |>
  group_by(continent) |>
  summarize(tot_pop = sum(pop)) ## NOTE: You can spell this either way.
cnt07
```

- PLEASE NOTICE WE CHANGED THE GRAIN OF THE DATA.
    - From: country/year
    - To: continent/population
- ðŸ˜³ ðŸ˜² ðŸ˜±

## YOUR TURN

Can you draw a bar plot of this data?

```{r}
## YOUR CODE HERE!

```

## Your Turn

Can you calculate the average life expectancy, by country, in the "Americas" continent prior to 1980?

```{r}
## YOUR CODE HERE!

```


## YOUR TURN

The gapminder data set contains country-grain data from 1952 to 2007. Which year has the highest number of countries? What about the lowest?

- I'm asking you to group by year and count the number of countries in the that given year.
- This is another change to change the grain of the data.

```{r}
## YOUR CODE HERE!

```


## YOUR TURN

What country had the highest life expectancy in the 1990's?

- This would include the 1992 and 1997 data.
- You can do this with the coding you know, but it is also a nice way to introduce `between()`.

```{r}
## YOUR CODE HERE!

```



# Mutate

- Teenage Mutant Ninja Columns . . . . 
- `mutate()` creates NEW columns from our existing data
- Unbelievably useful!

For example, we can add a percent column to `cnt07`

```{r}
cnt07 <-
  cnt07 |>
  mutate(prc_pop = 100 * tot_pop / sum(tot_pop))
cnt07
```

You can also use mutate to create new groupings:

```{r}
nato_members <- c(
  "Albania", "Belgium", "Bulgaria", "Canada", "Croatia",
  "Czech Republic", "Denmark", "Estonia", "France", "Germany",
  "Greece", "Hungary", "Iceland", "Italy", "Latvia",
  "Lithuania", "Luxembourg", "Montenegro", "Netherlands",
  "North Macedonia", "Norway", "Poland", "Portugal", "Romania",
  "Slovak Republic", "Slovenia", "Spain", "Turkey",
  "United Kingdom", "United States"
)
gapminder <-
  gapminder |>
  mutate(nato = if_else(country %in% nato_members, TRUE, FALSE))

gapminder |>
  filter(nato) |>
  select(country) |>
  distinct()
```
Our data lacks data for Estonia, Latvia, Lithuania, Luxembourg, North Macedonia.

## And You Can Combine These!

Can you create a scatter plot showing the relationship between GDP Per Capita and Life Expectancy for NATO members in 1992?

```{r}
## YOUR CODE HERE

```


# Some Modeling

It  might be nice to better understand the relationship between these two variables.

- GDP Per Capita will be treated as our independent variable (X-Axis)
- Life Expectancy will be treated as our dependent variable (Y-Axis)
- We will use ALL gapminder countries, not just those from Nato.

```{r}
lm_model <-
  gapminder |>
  filter(year == 1992) |>
  lm(lifeExp ~ gdpPercap, data = .)
summary(lm_model)

gapminder |>
  filter(year == 1992) |>
  ggplot(aes(x = gdpPercap, y = lifeExp, size = pop, color = country)) +
  geom_point(show.legend = FALSE) +
  theme() +
  theme_bw()
```

- The "linear" regression summary looks good.
- But . . . it isn't.
    - Our p-value is less than .05.
    - But we are explaining less than 50% of the variation in the data.
    - Something is not right here.
- The relationship is bent!
- [Wikipedia Anscombe's Quartet](https://en.wikipedia.org/wiki/Anscombe%27s_quartet)

```{r}
gapminder <-
  gapminder |>
  mutate(logLifeExp = log(lifeExp), logGdpPercap = log(gdpPercap))

lm_model <-
  gapminder |>
  filter(year == 1992) |>
  lm(logLifeExp ~ logGdpPercap, data = .)
summary(lm_model)

gapminder |>
  filter(year == 1992) |>
  ggplot(aes(x = logGdpPercap, y = logLifeExp, size = pop, color = country)) +
  geom_point(show.legend = FALSE) +
  theme() +
  theme_bw()
```

That's better.
